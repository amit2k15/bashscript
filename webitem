from pyzabbix import ZabbixAPI
import pandas as pd

# Replace these with your Zabbix server and credentials
ZABBIX_SERVER = 'http://your_zabbix_server'
ZABBIX_USER = 'your_zabbix_username'
ZABBIX_PASSWORD = 'your_zabbix_password'
HOST_GROUP_NAME = 'your_host_group_name'

# Connect to Zabbix API
zapi = ZabbixAPI(ZABBIX_SERVER)
zapi.login(ZABBIX_USER, ZABBIX_PASSWORD)

# Fetch the host group ID
host_groups = zapi.hostgroup.get(filter={"name": HOST_GROUP_NAME})
if not host_groups:
    raise ValueError("Host group not found")
host_group_id = host_groups[0]['groupid']

# Fetch hosts in the host group
hosts = zapi.host.get(groupids=host_group_id, output=["hostid", "host", "status"])

# Fetch web scenarios
web_scenarios = zapi.httptest.get(output=["httptestid", "name", "status", "delay"], selectSteps=["url"], hostids=[host['hostid'] for host in hosts])

# Fetch triggers
triggers = zapi.trigger.get(groupids=host_group_id, output=["triggerid", "description", "priority", "status"])

# Create a list to store the results
results = []

# Map status and severity codes to human-readable form
status_map = {0: 'enabled', 1: 'disabled'}
severity_map = {0: 'Not classified', 1: 'Information', 2: 'Minor', 3: 'Warning', 4: 'Major', 5: 'Disaster'}

# Process each host
for host in hosts:
    host_name = host['host']
    host_status = status_map[int(host['status'])]

    # Process each web scenario for the host
    for scenario in web_scenarios:
        if scenario['hostid'] == host['hostid']:
            scenario_name = scenario['name']
            scenario_status = status_map[int(scenario['status'])]
            scenario_url = scenario['steps'][0]['url'] if scenario['steps'] else ''
            scenario_delay = scenario['delay']

            # Process each trigger for the host
            for trigger in triggers:
                if host['hostid'] in trigger['hostid']:
                    trigger_name = trigger['description']
                    trigger_severity = severity_map[int(trigger['priority'])]
                    trigger_status = status_map[int(trigger['status'])]

                    # Only include rows with URLs in the trigger description
                    if scenario_url:
                        results.append({
                            'Host Name': host_name,
                            'Host Status': host_status,
                            'Web Scenario Name': scenario_name,
                            'Web Scenario Status': scenario_status,
                            'URL': scenario_url,
                            'Delay': scenario_delay,
                            'Trigger Name': trigger_name,
                            'Trigger Severity': trigger_severity,
                            'Trigger Status': trigger_status
                        })

# Convert results to a DataFrame
df = pd.DataFrame(results)

# Save the DataFrame to an Excel sheet
output_file = f'{HOST_GROUP_NAME}_report.xlsx'
df.to_excel(output_file, index=False)

print(f'Report generated: {output_file}')
