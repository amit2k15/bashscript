import pandas as pd
import pyzabbix
import xlsxwriter

# Zabbix server details
zabbix_url = 'http://zabbix.example.com'
zabbix_username = 'admin'
zabbix_password = 'password'

# Zabbix host group and time interval
hostgroup_name = 'My Host Group'
time_from = '2023-04-01 00:00:00'
time_till = '2023-04-30 23:59:59'

# Connect to Zabbix API
zabbix_api = pyzabbix.ZabbixAPI(url=zabbix_url, user=zabbix_username, password=zabbix_password)

# Get hosts in the specified host group
hostgroup = zabbix_api.hostgroup.get(filter={"name": hostgroup_name}, selectHosts="extend")[0]
hosts = hostgroup['hosts']

# Create a new Excel workbook
workbook = xlsxwriter.Workbook('zabbix_data.xlsx')

# Loop through hosts and generate data for each host
for host in hosts:
    # Get CPU and memory data for the host
    cpu_data = zabbix_api.history.get(itemids=[10123], hostids=[host['hostid']], time_from=time_from, time_till=time_till, output='extend')
    memory_data = zabbix_api.history.get(itemids=[10234], hostids=[host['hostid']], time_from=time_from, time_till=time_till, output='extend')

    # Create a new worksheet for the host
    worksheet_name = host['name']
    worksheet = workbook.add_worksheet(worksheet_name)

    # Convert CPU and memory data to Pandas DataFrame
    cpu_df = pd.DataFrame(cpu_data)
    memory_df = pd.DataFrame(memory_data)

    # Convert timestamp to datetime and set as index
    cpu_df['timestamp'] = pd.to_datetime(cpu_df['clock'], unit='s')
    cpu_df.set_index('timestamp', inplace=True)
    memory_df['timestamp'] = pd.to_datetime(memory_df['clock'], unit='s')
    memory_df.set_index('timestamp', inplace=True)

    # Resample data to daily average
    cpu_daily = cpu_df.resample('D').mean()
    memory_daily = memory_df.resample('D').mean()

    # Write CPU and memory data to worksheet
    worksheet.write('A1', 'Date')
    worksheet.write('B1', 'CPU Utilization')
    worksheet.write('C1', 'Memory Utilization')
    row = 1
    for date, cpu_util, memory_util in zip(cpu_daily.index, cpu_daily['value'], memory_daily['value']):
        worksheet.write(row, 0, date.date())
        worksheet.write(row, 1, cpu_util)
        worksheet.write(row, 2, memory_util)
        row += 1

# Close workbook
workbook.close()
