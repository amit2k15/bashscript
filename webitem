from pyzabbix import ZabbixAPI
import pandas as pd

# Define your Zabbix server URL and credentials
ZABBIX_SERVER = 'http://your_zabbix_server_url'
ZABBIX_USER = 'your_username'
ZABBIX_PASSWORD = 'your_password'

# Connect to the Zabbix server
zapi = ZabbixAPI(ZABBIX_SERVER)
zapi.login(ZABBIX_USER, ZABBIX_PASSWORD)

# Define the host group name
HOST_GROUP_NAME = 'your_host_group_name'

# Fetch the host group ID based on the host group name
host_groups = zapi.hostgroup.get(filter={"name": HOST_GROUP_NAME})
if not host_groups:
    raise ValueError(f"Host group '{HOST_GROUP_NAME}' not found.")
host_group_id = host_groups[0]['groupid']

# Fetch hosts in the host group
hosts = zapi.host.get(groupids=host_group_id, output=['hostid', 'name', 'status'])

# Fetch web scenarios for the hosts
web_scenarios = zapi.httptest.get(hostids=[host['hostid'] for host in hosts], output=['httptestid', 'name', 'status', 'delay'])

# Fetch triggers for the hosts
triggers = zapi.trigger.get(hostids=[host['hostid'] for host in hosts], output=['description', 'priority', 'status'])

# Prepare data for DataFrame
data = []
for host in hosts:
    host_id = host['hostid']
    host_name = host['name']
    host_status = 'Enabled' if host['status'] == '0' else 'Disabled'
    
    for web_scenario in web_scenarios:
        if web_scenario['hostid'] == host_id:
            web_scenario_name = web_scenario['name']
            web_scenario_status = 'Enabled' if web_scenario['status'] == '0' else 'Disabled'
            url = web_scenario.get('steps', [{'url': ''}])[0]['url']
            delay = web_scenario['delay']
            
            for trigger in triggers:
                if trigger['hostid'] == host_id:
                    trigger_name = trigger['description']
                    if 'http' not in trigger_name:
                        continue
                    trigger_severity = {
                        '1': 'Information',
                        '2': 'Minor',
                        '3': 'Warning',
                        '4': 'Major'
                    }.get(trigger['priority'], 'Unknown')
                    trigger_status = 'Enabled' if trigger['status'] == '0' else 'Disabled'
                    
                    data.append([
                        host_name, host_status, web_scenario_name, web_scenario_status, url, delay,
                        trigger_name, trigger_severity, trigger_status
                    ])

# Create DataFrame and save to Excel
df = pd.DataFrame(data, columns=[
    'Host Name', 'Host Status', 'Web Scenario Name', 'Web Scenario Status', 'URL', 'Delay',
    'Trigger Name', 'Trigger Severity', 'Trigger Status'
])
df.to_excel(f'{HOST_GROUP_NAME}_report.xlsx', index=False)

print(f"Report generated: {HOST_GROUP_NAME}_report.xlsx")
