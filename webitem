import pandas as pd
from pyzabbix import ZabbixAPI

# Replace with your Zabbix server URL and credentials
ZABBIX_SERVER = 'http://your_zabbix_server/zabbix'
USERNAME = 'your_username'
PASSWORD = 'your_password'

# Connect to the Zabbix API
zapi = ZabbixAPI(ZABBIX_SERVER)
zapi.login(USERNAME, PASSWORD)

# Replace with your host group name
HOST_GROUP_NAME = 'Your Host Group Name'

# Fetch the host group ID
host_group = zapi.hostgroup.get(filter={"name": HOST_GROUP_NAME})
host_group_id = host_group[0]['groupid']

# Fetch hosts in the host group
hosts = zapi.host.get(groupids=host_group_id, selectInterfaces=['ip'])

# Fetch web scenarios
web_scenarios = zapi.httptest.get(groupids=host_group_id, selectSteps='extend')

# Fetch triggers
triggers = zapi.trigger.get(groupids=host_group_id, selectHosts=['host'], expandDescription=True, expandComment=True)

# Prepare the data
data = []

for host in hosts:
    host_name = host['host']
    host_status = 'Enabled' if host['status'] == '0' else 'Disabled'

    # Get web scenarios for the host
    host_web_scenarios = [ws for ws in web_scenarios if ws['hostid'] == host['hostid']]
    for scenario in host_web_scenarios:
        scenario_name = scenario['name']
        scenario_status = 'Enabled' if scenario['status'] == '0' else 'Disabled'
        url = scenario['steps'][0]['url'] if scenario['steps'] else 'N/A'
        delay = scenario['delay']

        # Get triggers for the host
        host_triggers = [trigger for trigger in triggers if host_name in [h['host'] for h in trigger['hosts']]]
        for trigger in host_triggers:
            trigger_name = trigger['description']
            trigger_severity = {0: 'Not classified', 1: 'Information', 2: 'Warning', 3: 'Average', 4: 'High', 5: 'Disaster'}[int(trigger['priority'])]
            trigger_status = 'Enabled' if trigger['status'] == '0' else 'Disabled'
            
            # Append the data to the list
            data.append({
                'Host Name': host_name,
                'Host Status': host_status,
                'Web Scenario Name': scenario_name,
                'Web Scenario Status': scenario_status,
                'URL': url,
                'Delay': delay,
                'Trigger Name': trigger_name,
                'Trigger Severity': trigger_severity,
                'Trigger Status': trigger_status,
                'Host Group': HOST_GROUP_NAME
            })

# Convert the data to a DataFrame
df = pd.DataFrame(data)

# Save to Excel
df.to_excel(f'{HOST_GROUP_NAME}_report.xlsx', index=False)

print(f'Report for {HOST_GROUP_NAME} has been generated and saved as {HOST_GROUP_NAME}_report.xlsx')
